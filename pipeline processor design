module pipeline_processor (
    input clk,
    input reset
);

// Instruction Opcodes
localparam ADD  = 2'b00;
localparam SUB  = 2'b01;
localparam LOAD = 2'b10;

// Simple Memory and Register File
reg [15:0] mem [0:15];         // Memory for LOAD
reg [15:0] regfile [0:7];      // 8 Registers

// Instruction Format: [15:14]=opcode, [13:11]=rd, [10:8]=rs1, [7:5]=rs2, [4:0]=imm
reg [15:0] instr_mem [0:15];   // Instruction Memory

// Pipeline Registers
reg [15:0] IF_ID_instr, IF_ID_npc;
reg [15:0] ID_EX_instr, ID_EX_npc, ID_EX_rs1, ID_EX_rs2;
reg [15:0] EX_MEM_instr, EX_MEM_alu, EX_MEM_rs2;
reg [15:0] MEM_WB_instr, MEM_WB_result;

// Program Counter
reg [3:0] pc;

// Initialize Instruction Memory for Demo
initial begin
    // Format: {opcode[15:14], rd[13:11], rs1[10:8], rs2[7:5], imm[4:0]}
    // ADD R1 = R2 + R3
    instr_mem[0] = {ADD, 3'd1, 3'd2, 3'd3, 5'd0};
    // SUB R4 = R1 - R2
    instr_mem[1] = {SUB, 3'd4, 3'd1, 3'd2, 5'd0};
    // LOAD R5 = MEM[R4 + 5]
    instr_mem[2] = {LOAD, 3'd5, 3'd4, 3'd0, 5'd5};
    instr_mem[3] = 16'b0; // NOP
end

// Initialize Data Memory and Registers
integer i;
initial begin
    for (i = 0; i < 8; i = i+1) regfile[i] = i;
    for (i = 0; i < 16; i = i+1) mem[i] = i*10;
end

// Pipeline Operation
always @(posedge clk or posedge reset) begin
    if (reset) begin
        pc <= 0;
        IF_ID_instr <= 0; IF_ID_npc <= 0;
        ID_EX_instr <= 0; ID_EX_npc <= 0; ID_EX_rs1 <= 0; ID_EX_rs2 <= 0;
        EX_MEM_instr <= 0; EX_MEM_alu <= 0; EX_MEM_rs2 <= 0;
        MEM_WB_instr <= 0; MEM_WB_result <= 0;
    end else begin
        // -------------------- Write Back Stage --------------------
        if (MEM_WB_instr[15:14] == ADD || MEM_WB_instr[15:14] == SUB || MEM_WB_instr[15:14] == LOAD)
            regfile[MEM_WB_instr[13:11]] <= MEM_WB_result;

        // -------------------- Memory Stage ------------------------
        EX_MEM_instr <= ID_EX_instr;
        case (ID_EX_instr[15:14])
            ADD:  EX_MEM_alu <= ID_EX_rs1 + ID_EX_rs2;
            SUB:  EX_MEM_alu <= ID_EX_rs1 - ID_EX_rs2;
            LOAD: EX_MEM_alu <= mem[ID_EX_rs1 + ID_EX_instr[4:0]];
            default: EX_MEM_alu <= 0;
        endcase
        EX_MEM_rs2 <= ID_EX_rs2;

        // -------------------- Execute Stage -----------------------
        ID_EX_instr <= IF_ID_instr;
        ID_EX_npc   <= IF_ID_npc;
        ID_EX_rs1   <= regfile[IF_ID_instr[10:8]];
        ID_EX_rs2   <= regfile[IF_ID_instr[7:5]];

        // -------------------- Instruction Decode Stage ------------
        IF_ID_instr <= instr_mem[pc];
        IF_ID_npc   <= pc + 1;

        // -------------------- Instruction Fetch Stage -------------
        pc <= pc + 1;

        // -------------------- WB Stage: Move to WB Reg ------------
        MEM_WB_instr  <= EX_MEM_instr;
        MEM_WB_result <= EX_MEM_alu;
    end
end

// For demonstration, display pipeline status
always @(posedge clk) begin
    $display("PC=%d | IF:[%h] | ID:[%h] | EX:[%h] | MEM/WB:[%h] | R1=%d R2=%d R3=%d R4=%d R5=%d",
        pc, IF_ID_instr, ID_EX_instr, EX_MEM_instr, MEM_WB_instr, regfile[1], regfile[2], regfile[3], regfile[4], regfile[5]);
end

endmodule
